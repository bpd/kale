
# reference: http://www.codecommit.com/blog/scala/what-is-hindley-milner-and-why-is-it-cool

# start with a simple expression

  f: { x y | (x y) }

  g: (f a 2)

#
#  'f' accepts a function 'x' that takes 'y' as an argument,
#    and evaluates to the result of (x y)
#
#  'g' is the result of 'f' called with the free symbol 'a'
#    and the integer 2 as arguments
#
#  'g' returns the result of 'f', which is the result of 'a'
#    with the argument 2
#

  a: { z | [ z ] }

  f: { x y | (x y) }

  g: (f a 2)

#
#  'a' returns an Array of values of the type of argument 'z'
#
#  since argument 'z' is 2, which is of type Int, 
#    'a' returns an Array of values of type Int
#
#  since 'a' returns an Array of values of type Int,
#    'g' becomes an Array of values of type Int
#
#  'f' and 'a' are still parametric
#
#
#
#


  a: { z:Z | [ z ] } => A

  f: { x:X y:Y | (x y) } => F

  g: (f a 2) => G
  
  #=====================
  # treat each type as a function
  # that is called with type parameters
  #=====================
  
  F(X Y) := X(Y)
  A(Z)   := Array(Z)
  
  #=====================
  # both F and A are parametric
  # (they vary depending on their parameters)
  # G gives us the parameters of these types,
  #  with Int (derived from 2 in the callsite)
  #   being the only concrete type,
  #    and all others dependent types
  #=====================
  
  G      := F(A Int)
  F(X Y) := X(Y)
  A(Z)   := Array(Z)
  
  #=====================
  # when evaluated in the context of G, we now
  # have type parameters that can propagate through F and A
  #=====================
  
    G        := F(A Int)
    F(A Int) := A(Int)    # propagate through F
    A(Z)     := Array(Z)
    #===================
    G        := F(A Int)
    F(A Int) := A(Int)    
    A(Int)   := Array(Int)  # propagate through A
  
  #=====================
  # then substitute back up to G
  #=====================
  
    G        := F(A Int)
    F(A Int) := A(Int)    
    A(Int)   := Array(Int)
    #===================
    G        := F(A Int)
    F(A Int) := Array(Int)
    #===================
    G        := Array(Int)


  #=====================
  # then substitute back up to G
  #=====================
  





